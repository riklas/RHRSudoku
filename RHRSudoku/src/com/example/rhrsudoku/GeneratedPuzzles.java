package com.example.rhrsudoku;


import java.util.Random;

import exactCover.Quant;

public class GeneratedPuzzles implements SudokuGenerator {

	SudokuPuzzle puzzle = new SudokuPuzzle();
	SudokuSolver solver = new SudokuSolver();
	Quant currentSolutions;
	int value = 0;
	int ceilingCount;
	int floorCount; 
	
	public GeneratedPuzzles() {
	}

	@Override
	public SudokuPuzzle getPuzzle(int difficulty) {
		switch(difficulty) {
		case 0: floorCount = 32; 
				ceilingCount = 40;
				break;
		case 1: floorCount = 28; 
				ceilingCount = 32;
				break;
		case 2: floorCount = 22; 
				ceilingCount = 28;
				break;
		case 3: floorCount = 18; 
				ceilingCount = 22;
				break;
		default:floorCount = 32; 
				ceilingCount = 40;
				break;
		}
		
		
		
		puzzle.printPuzzle();
		//this returns a solved puzzle
		puzzle = solver.solvePuzzle(puzzle);		
		puzzle.printPuzzle();
		//this returns puzzle with values taken out
		puzzle = setValues(puzzle);
		return puzzle;
	}

	
	public SudokuPuzzle setValues(SudokuPuzzle targetPuzzle) {
		
		targetPuzzle = removeValue(targetPuzzle);
		
		// set the input method 
		for(int row=0; row<9; row++) {
			for(int column=0; column<9; column++) {
				if (targetPuzzle.puzzle[row][column].hasValue) {
					targetPuzzle.puzzle[row][column].setInput(SudokuPuzzleCell.GENERATED); //set input method as generated
				}
			}
		}
		
		return targetPuzzle;
	}
	
	public SudokuPuzzle removeValue(SudokuPuzzle targetPuzzle) {
		System.out.println("floor count " + floorCount);
		System.out.println("ceiling count " + ceilingCount);
		
		Quant numSolutions;
		int randx;
		int randy;
		int counter = 81;	// the number of values removed from puzzle
		Random randomGenerator = new Random();
		int lock;
		
		while (true) {
			do {
				randx = randomGenerator.nextInt(9);	//generates random number from 0 - 8
				randy = randomGenerator.nextInt(9);	// generates random number from 0 - 8
				if (targetPuzzle.puzzle[randx][randy].hasValue) {
					value = targetPuzzle.puzzle[randx][randy].getValue();	//saves the value from the index of random number
					targetPuzzle.puzzle[randx][randy].isEditable = true;	//isEditable was set false after being generated by solver
					targetPuzzle.puzzle[randx][randy].removeValue();  // set the value at index to 0
					targetPuzzle.puzzle[randx][randy].setInput(SudokuPuzzleCell.NONE); //set input method to none
					counter--;
				}
				numSolutions = solver.solutionsM(targetPuzzle);	//see the number solutions with the value taken out
				targetPuzzle.printPuzzle();			////if the number of values left in puzzle go less than the lower bound (specified by difficulty), 
				if (counter < floorCount) break;	//then stop removing values regardless of the numSolutions
			}
			while (numSolutions == Quant.ONE); // if there is 1 solution left do it again
			
			targetPuzzle.puzzle[randx][randy].setValue(value);	// put the last value back
			counter++;
			
			if (counter > ceilingCount) {		//if the values have not reached the minimum specified by count don't return
				continue;
			}	
			else break;				//only break when number of values is <= count
		}
	
		System.out.println("counter: " + counter);
		return targetPuzzle;	//return the puzzle
		}			
};

